using CacheEngineShared;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Runtime.Caching;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;

namespace MessageBroker
{
    public class oTest
    {
        public int id { set; get; }
        public string name { set; get; }
    }

    public class TestService : ICacheFind
    {
        private readonly IDataflowSubscribers _dataflow;
        public TestService(IDataflowSubscribers dataflow) { _dataflow = dataflow; }

        static List<oTest> _list = new List<oTest>() { };
        public string execute(string conditons)
        {
            try
            {
                string key = Guid.NewGuid().ToString();

                var a = _list.Where(conditons).ToArray<dynamic>();
                ObjectCache cache = MemoryCache.Default;
                cache.Set(key, a, new CacheItemPolicy());

                return key;
            }
            catch (Exception ex)
            {
                _dataflow.Enqueue(new JobLogPrintOut(ex.Message));
            }
            return null;
        }

        public bool push(string arrayItemJson)
        {
            try
            {
                _list = JsonConvert.DeserializeObject<List<oTest>>(arrayItemJson);
                return true;
            }
            catch (Exception ex)
            {
                _dataflow.Enqueue(new JobLogPrintOut(ex.Message));
            }
            return false;
        }
    }

    public class TestBehavior : IServiceBehavior, IInstanceProvider
    {
        private readonly IDataflowSubscribers _dataflow;
        public TestBehavior(IDataflowSubscribers dataflow) { _dataflow = dataflow; }
        public object GetInstance(InstanceContext instanceContext) => new TestService(_dataflow);
        public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) { }
        public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) { }
        public void ReleaseInstance(InstanceContext instanceContext, object instance) { }
        public object GetInstance(InstanceContext instanceContext, Message message) => this.GetInstance(instanceContext);
        public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
            foreach (ChannelDispatcher cd in serviceHostBase.ChannelDispatchers)
                foreach (EndpointDispatcher ed in cd.Endpoints)
                    ed.DispatchRuntime.InstanceProvider = this;
        }
    }
}
