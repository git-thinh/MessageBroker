// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace MessageShared {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Update {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_MessageShared_mUpdateRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mUpdateRequest, global::MessageShared.mUpdateRequest.Builder> internal__static_MessageShared_mUpdateRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MessageShared_mUpdateReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mUpdateReply, global::MessageShared.mUpdateReply.Builder> internal__static_MessageShared_mUpdateReply__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Update() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx1cGRhdGUucHJvdG8SDU1lc3NhZ2VTaGFyZWQiRAoObVVwZGF0ZVJlcXVl", 
            "c3QSDAoEdHlwZRgBIAIoCRISCgpOYW1lT2JqZWN0GAIgAigJEhAKCGpzb25J", 
            "dGVtGAMgAigJImcKDG1VcGRhdGVSZXBseRIKCgJpZBgBIAIoCRIKCgJvaxgC", 
            "IAIoCBIuCgdyZXF1ZXN0GAMgAigLMh0uTWVzc2FnZVNoYXJlZC5tVXBkYXRl", 
            "UmVxdWVzdBIPCgdtZXNzYWdlGAQgAigJMlQKDm1VcGRhdGVTZXJ2aWNlEkIK", 
            "BFNlbmQSHS5NZXNzYWdlU2hhcmVkLm1VcGRhdGVSZXF1ZXN0GhsuTWVzc2Fn", 
          "ZVNoYXJlZC5tVXBkYXRlUmVwbHlCAkgB"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_MessageShared_mUpdateRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_MessageShared_mUpdateRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mUpdateRequest, global::MessageShared.mUpdateRequest.Builder>(internal__static_MessageShared_mUpdateRequest__Descriptor,
                new string[] { "Type", "NameObject", "JsonItem", });
        internal__static_MessageShared_mUpdateReply__Descriptor = Descriptor.MessageTypes[1];
        internal__static_MessageShared_mUpdateReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mUpdateReply, global::MessageShared.mUpdateReply.Builder>(internal__static_MessageShared_mUpdateReply__Descriptor,
                new string[] { "Id", "Ok", "Request", "Message", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mUpdateRequest : pb::GeneratedMessage<mUpdateRequest, mUpdateRequest.Builder> {
    private mUpdateRequest() { }
    private static readonly mUpdateRequest defaultInstance = new mUpdateRequest().MakeReadOnly();
    private static readonly string[] _mUpdateRequestFieldNames = new string[] { "NameObject", "jsonItem", "type" };
    private static readonly uint[] _mUpdateRequestFieldTags = new uint[] { 18, 26, 10 };
    public static mUpdateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mUpdateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mUpdateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.Update.internal__static_MessageShared_mUpdateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mUpdateRequest, mUpdateRequest.Builder> InternalFieldAccessors {
      get { return global::MessageShared.Update.internal__static_MessageShared_mUpdateRequest__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int NameObjectFieldNumber = 2;
    private bool hasNameObject;
    private string nameObject_ = "";
    public bool HasNameObject {
      get { return hasNameObject; }
    }
    public string NameObject {
      get { return nameObject_; }
    }
    
    public const int JsonItemFieldNumber = 3;
    private bool hasJsonItem;
    private string jsonItem_ = "";
    public bool HasJsonItem {
      get { return hasJsonItem; }
    }
    public string JsonItem {
      get { return jsonItem_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasNameObject) return false;
        if (!hasJsonItem) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mUpdateRequestFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[2], Type);
      }
      if (hasNameObject) {
        output.WriteString(2, field_names[0], NameObject);
      }
      if (hasJsonItem) {
        output.WriteString(3, field_names[1], JsonItem);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Type);
      }
      if (hasNameObject) {
        size += pb::CodedOutputStream.ComputeStringSize(2, NameObject);
      }
      if (hasJsonItem) {
        size += pb::CodedOutputStream.ComputeStringSize(3, JsonItem);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mUpdateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mUpdateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mUpdateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mUpdateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mUpdateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mUpdateRequest result;
      
      private mUpdateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          mUpdateRequest original = result;
          result = new mUpdateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mUpdateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mUpdateRequest.Descriptor; }
      }
      
      public override mUpdateRequest DefaultInstanceForType {
        get { return global::MessageShared.mUpdateRequest.DefaultInstance; }
      }
      
      public override mUpdateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mUpdateRequest) {
          return MergeFrom((mUpdateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mUpdateRequest other) {
        if (other == global::MessageShared.mUpdateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNameObject) {
          NameObject = other.NameObject;
        }
        if (other.HasJsonItem) {
          JsonItem = other.JsonItem;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mUpdateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasNameObject = input.ReadString(ref result.nameObject_);
              break;
            }
            case 26: {
              result.hasJsonItem = input.ReadString(ref result.jsonItem_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasNameObject {
        get { return result.hasNameObject; }
      }
      public string NameObject {
        get { return result.NameObject; }
        set { SetNameObject(value); }
      }
      public Builder SetNameObject(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNameObject = true;
        result.nameObject_ = value;
        return this;
      }
      public Builder ClearNameObject() {
        PrepareBuilder();
        result.hasNameObject = false;
        result.nameObject_ = "";
        return this;
      }
      
      public bool HasJsonItem {
        get { return result.hasJsonItem; }
      }
      public string JsonItem {
        get { return result.JsonItem; }
        set { SetJsonItem(value); }
      }
      public Builder SetJsonItem(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJsonItem = true;
        result.jsonItem_ = value;
        return this;
      }
      public Builder ClearJsonItem() {
        PrepareBuilder();
        result.hasJsonItem = false;
        result.jsonItem_ = "";
        return this;
      }
    }
    static mUpdateRequest() {
      object.ReferenceEquals(global::MessageShared.Update.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mUpdateReply : pb::GeneratedMessage<mUpdateReply, mUpdateReply.Builder> {
    private mUpdateReply() { }
    private static readonly mUpdateReply defaultInstance = new mUpdateReply().MakeReadOnly();
    private static readonly string[] _mUpdateReplyFieldNames = new string[] { "id", "message", "ok", "request" };
    private static readonly uint[] _mUpdateReplyFieldTags = new uint[] { 10, 34, 16, 26 };
    public static mUpdateReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mUpdateReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mUpdateReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.Update.internal__static_MessageShared_mUpdateReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mUpdateReply, mUpdateReply.Builder> InternalFieldAccessors {
      get { return global::MessageShared.Update.internal__static_MessageShared_mUpdateReply__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int OkFieldNumber = 2;
    private bool hasOk;
    private bool ok_;
    public bool HasOk {
      get { return hasOk; }
    }
    public bool Ok {
      get { return ok_; }
    }
    
    public const int RequestFieldNumber = 3;
    private bool hasRequest;
    private global::MessageShared.mUpdateRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::MessageShared.mUpdateRequest Request {
      get { return request_ ?? global::MessageShared.mUpdateRequest.DefaultInstance; }
    }
    
    public const int MessageFieldNumber = 4;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasOk) return false;
        if (!hasRequest) return false;
        if (!hasMessage) return false;
        if (!Request.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mUpdateReplyFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasOk) {
        output.WriteBool(2, field_names[2], Ok);
      }
      if (hasRequest) {
        output.WriteMessage(3, field_names[3], Request);
      }
      if (hasMessage) {
        output.WriteString(4, field_names[1], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Ok);
      }
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Request);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mUpdateReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mUpdateReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mUpdateReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mUpdateReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mUpdateReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mUpdateReply MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mUpdateReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mUpdateReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mUpdateReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mUpdateReply result;
      
      private mUpdateReply PrepareBuilder() {
        if (resultIsReadOnly) {
          mUpdateReply original = result;
          result = new mUpdateReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mUpdateReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mUpdateReply.Descriptor; }
      }
      
      public override mUpdateReply DefaultInstanceForType {
        get { return global::MessageShared.mUpdateReply.DefaultInstance; }
      }
      
      public override mUpdateReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mUpdateReply) {
          return MergeFrom((mUpdateReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mUpdateReply other) {
        if (other == global::MessageShared.mUpdateReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOk) {
          Ok = other.Ok;
        }
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mUpdateReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mUpdateReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasOk = input.ReadBool(ref result.ok_);
              break;
            }
            case 26: {
              global::MessageShared.mUpdateRequest.Builder subBuilder = global::MessageShared.mUpdateRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasOk {
        get { return result.hasOk; }
      }
      public bool Ok {
        get { return result.Ok; }
        set { SetOk(value); }
      }
      public Builder SetOk(bool value) {
        PrepareBuilder();
        result.hasOk = true;
        result.ok_ = value;
        return this;
      }
      public Builder ClearOk() {
        PrepareBuilder();
        result.hasOk = false;
        result.ok_ = false;
        return this;
      }
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::MessageShared.mUpdateRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::MessageShared.mUpdateRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::MessageShared.mUpdateRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::MessageShared.mUpdateRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::MessageShared.mUpdateRequest.DefaultInstance) {
            result.request_ = global::MessageShared.mUpdateRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static mUpdateReply() {
      object.ReferenceEquals(global::MessageShared.Update.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public partial interface ImUpdateService {
    global::MessageShared.mUpdateReply Send(global::MessageShared.mUpdateRequest mUpdateRequest);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class mUpdateService : ImUpdateService, pb::IRpcDispatch, global::System.IDisposable {
    private readonly bool dispose;
    private readonly pb::IRpcDispatch dispatch;
    public mUpdateService(pb::IRpcDispatch dispatch) : this(dispatch, true) {
    }
    public mUpdateService(pb::IRpcDispatch dispatch, bool dispose) {
      pb::ThrowHelper.ThrowIfNull(this.dispatch = dispatch, "dispatch");
      this.dispose = dispose && dispatch is global::System.IDisposable;
    }
    
    public void Dispose() {
      if (dispose) ((global::System.IDisposable)dispatch).Dispose();
    }
    
    TMessage pb::IRpcDispatch.CallMethod<TMessage, TBuilder>(string method, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response) {
      return dispatch.CallMethod(method, request, response);
    }
    
    public global::MessageShared.mUpdateReply Send(global::MessageShared.mUpdateRequest mUpdateRequest) {
       return dispatch.CallMethod("Send", mUpdateRequest, global::MessageShared.mUpdateReply.CreateBuilder());
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Dispatch : pb::IRpcDispatch, global::System.IDisposable {
      private readonly bool dispose;
      private readonly ImUpdateService implementation;
      public Dispatch(ImUpdateService implementation) : this(implementation, true) {
      }
      public Dispatch(ImUpdateService implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public TMessage CallMethod<TMessage, TBuilder>(string methodName, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response)
        where TMessage : pb::IMessageLite<TMessage, TBuilder>
        where TBuilder : pb::IBuilderLite<TMessage, TBuilder> {
        switch(methodName) {
          case "Send": return response.MergeFrom(implementation.Send((global::MessageShared.mUpdateRequest)request)).Build();
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ImUpdateService), methodName);
        }
      }
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ServerStub : pb::IRpcServerStub, global::System.IDisposable {
      private readonly bool dispose;
      private readonly pb::IRpcDispatch implementation;
      public ServerStub(ImUpdateService implementation) : this(implementation, true) {
      }
      public ServerStub(ImUpdateService implementation, bool dispose) : this(new Dispatch(implementation, dispose), dispose) {
      }
      public ServerStub(pb::IRpcDispatch implementation) : this(implementation, true) {
      }
      public ServerStub(pb::IRpcDispatch implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public pb::IMessageLite CallMethod(string methodName, pb::ICodedInputStream input, pb::ExtensionRegistry registry) {
        switch(methodName) {
          case "Send": return implementation.CallMethod(methodName, global::MessageShared.mUpdateRequest.ParseFrom(input, registry), global::MessageShared.mUpdateReply.CreateBuilder());
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ImUpdateService), methodName);
        }
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
