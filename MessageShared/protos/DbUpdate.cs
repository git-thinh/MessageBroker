// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace MessageShared {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DbUpdate {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_MessageShared_mParameter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mParameter, global::MessageShared.mParameter.Builder> internal__static_MessageShared_mParameter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MessageShared_mParameterCollection__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mParameterCollection, global::MessageShared.mParameterCollection.Builder> internal__static_MessageShared_mParameterCollection__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MessageShared_mDbUpdateRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mDbUpdateRequest, global::MessageShared.mDbUpdateRequest.Builder> internal__static_MessageShared_mDbUpdateRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MessageShared_mDbUpdateReply__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MessageShared.mDbUpdateReply, global::MessageShared.mDbUpdateReply.Builder> internal__static_MessageShared_mDbUpdateReply__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static DbUpdate() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5EYlVwZGF0ZS5wcm90bxINTWVzc2FnZVNoYXJlZCIoCgptUGFyYW1ldGVy", 
            "EgsKA2tleRgBIAIoCRINCgV2YWx1ZRgCIAIoCSJAChRtUGFyYW1ldGVyQ29s", 
            "bGVjdGlvbhIoCgVpdGVtcxgBIAMoCzIZLk1lc3NhZ2VTaGFyZWQubVBhcmFt", 
            "ZXRlciJsChBtRGJVcGRhdGVSZXF1ZXN0EgwKBHR5cGUYASACKAUSEQoJbmFt", 
            "ZVN0b3JlGAIgAigJEjcKCnBhcmFtZXRlcnMYAyACKAsyIy5NZXNzYWdlU2hh", 
            "cmVkLm1QYXJhbWV0ZXJDb2xsZWN0aW9uImsKDm1EYlVwZGF0ZVJlcGx5EgoK", 
            "AmlkGAEgAigJEgoKAm9rGAIgAigIEjAKB3JlcXVlc3QYAyACKAsyHy5NZXNz", 
            "YWdlU2hhcmVkLm1EYlVwZGF0ZVJlcXVlc3QSDwoHbWVzc2FnZRgEIAIoCTJa", 
            "ChBtRGJVcGRhdGVTZXJ2aWNlEkYKBFNlbmQSHy5NZXNzYWdlU2hhcmVkLm1E", 
            "YlVwZGF0ZVJlcXVlc3QaHS5NZXNzYWdlU2hhcmVkLm1EYlVwZGF0ZVJlcGx5", 
          "QgJIAQ=="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_MessageShared_mParameter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_MessageShared_mParameter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mParameter, global::MessageShared.mParameter.Builder>(internal__static_MessageShared_mParameter__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_MessageShared_mParameterCollection__Descriptor = Descriptor.MessageTypes[1];
        internal__static_MessageShared_mParameterCollection__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mParameterCollection, global::MessageShared.mParameterCollection.Builder>(internal__static_MessageShared_mParameterCollection__Descriptor,
                new string[] { "Items", });
        internal__static_MessageShared_mDbUpdateRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_MessageShared_mDbUpdateRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mDbUpdateRequest, global::MessageShared.mDbUpdateRequest.Builder>(internal__static_MessageShared_mDbUpdateRequest__Descriptor,
                new string[] { "Type", "NameStore", "Parameters", });
        internal__static_MessageShared_mDbUpdateReply__Descriptor = Descriptor.MessageTypes[3];
        internal__static_MessageShared_mDbUpdateReply__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MessageShared.mDbUpdateReply, global::MessageShared.mDbUpdateReply.Builder>(internal__static_MessageShared_mDbUpdateReply__Descriptor,
                new string[] { "Id", "Ok", "Request", "Message", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mParameter : pb::GeneratedMessage<mParameter, mParameter.Builder> {
    private mParameter() { }
    private static readonly mParameter defaultInstance = new mParameter().MakeReadOnly();
    private static readonly string[] _mParameterFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _mParameterFieldTags = new uint[] { 10, 18 };
    public static mParameter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mParameter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mParameter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mParameter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mParameter, mParameter.Builder> InternalFieldAccessors {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mParameter__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mParameterFieldNames;
      if (hasKey) {
        output.WriteString(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Key);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mParameter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mParameter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mParameter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mParameter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mParameter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mParameter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mParameter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mParameter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mParameter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mParameter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mParameter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mParameter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mParameter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mParameter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mParameter result;
      
      private mParameter PrepareBuilder() {
        if (resultIsReadOnly) {
          mParameter original = result;
          result = new mParameter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mParameter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mParameter.Descriptor; }
      }
      
      public override mParameter DefaultInstanceForType {
        get { return global::MessageShared.mParameter.DefaultInstance; }
      }
      
      public override mParameter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mParameter) {
          return MergeFrom((mParameter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mParameter other) {
        if (other == global::MessageShared.mParameter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mParameterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mParameterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static mParameter() {
      object.ReferenceEquals(global::MessageShared.DbUpdate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mParameterCollection : pb::GeneratedMessage<mParameterCollection, mParameterCollection.Builder> {
    private mParameterCollection() { }
    private static readonly mParameterCollection defaultInstance = new mParameterCollection().MakeReadOnly();
    private static readonly string[] _mParameterCollectionFieldNames = new string[] { "items" };
    private static readonly uint[] _mParameterCollectionFieldTags = new uint[] { 10 };
    public static mParameterCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mParameterCollection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mParameterCollection ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mParameterCollection__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mParameterCollection, mParameterCollection.Builder> InternalFieldAccessors {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mParameterCollection__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::MessageShared.mParameter> items_ = new pbc::PopsicleList<global::MessageShared.mParameter>();
    public scg::IList<global::MessageShared.mParameter> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::MessageShared.mParameter GetItems(int index) {
      return items_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::MessageShared.mParameter element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mParameterCollectionFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::MessageShared.mParameter element in ItemsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mParameterCollection ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mParameterCollection ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mParameterCollection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mParameterCollection ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mParameterCollection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mParameterCollection MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mParameterCollection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mParameterCollection, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mParameterCollection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mParameterCollection result;
      
      private mParameterCollection PrepareBuilder() {
        if (resultIsReadOnly) {
          mParameterCollection original = result;
          result = new mParameterCollection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mParameterCollection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mParameterCollection.Descriptor; }
      }
      
      public override mParameterCollection DefaultInstanceForType {
        get { return global::MessageShared.mParameterCollection.DefaultInstance; }
      }
      
      public override mParameterCollection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mParameterCollection) {
          return MergeFrom((mParameterCollection) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mParameterCollection other) {
        if (other == global::MessageShared.mParameterCollection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mParameterCollectionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mParameterCollectionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::MessageShared.mParameter.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::MessageShared.mParameter> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::MessageShared.mParameter GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::MessageShared.mParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::MessageShared.mParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::MessageShared.mParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::MessageShared.mParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::MessageShared.mParameter> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static mParameterCollection() {
      object.ReferenceEquals(global::MessageShared.DbUpdate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mDbUpdateRequest : pb::GeneratedMessage<mDbUpdateRequest, mDbUpdateRequest.Builder> {
    private mDbUpdateRequest() { }
    private static readonly mDbUpdateRequest defaultInstance = new mDbUpdateRequest().MakeReadOnly();
    private static readonly string[] _mDbUpdateRequestFieldNames = new string[] { "nameStore", "parameters", "type" };
    private static readonly uint[] _mDbUpdateRequestFieldTags = new uint[] { 18, 26, 8 };
    public static mDbUpdateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mDbUpdateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mDbUpdateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mDbUpdateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mDbUpdateRequest, mDbUpdateRequest.Builder> InternalFieldAccessors {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mDbUpdateRequest__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NameStoreFieldNumber = 2;
    private bool hasNameStore;
    private string nameStore_ = "";
    public bool HasNameStore {
      get { return hasNameStore; }
    }
    public string NameStore {
      get { return nameStore_; }
    }
    
    public const int ParametersFieldNumber = 3;
    private bool hasParameters;
    private global::MessageShared.mParameterCollection parameters_;
    public bool HasParameters {
      get { return hasParameters; }
    }
    public global::MessageShared.mParameterCollection Parameters {
      get { return parameters_ ?? global::MessageShared.mParameterCollection.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasNameStore) return false;
        if (!hasParameters) return false;
        if (!Parameters.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mDbUpdateRequestFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[2], Type);
      }
      if (hasNameStore) {
        output.WriteString(2, field_names[0], NameStore);
      }
      if (hasParameters) {
        output.WriteMessage(3, field_names[1], Parameters);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
      }
      if (hasNameStore) {
        size += pb::CodedOutputStream.ComputeStringSize(2, NameStore);
      }
      if (hasParameters) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Parameters);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mDbUpdateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mDbUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mDbUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mDbUpdateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mDbUpdateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mDbUpdateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mDbUpdateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mDbUpdateRequest result;
      
      private mDbUpdateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          mDbUpdateRequest original = result;
          result = new mDbUpdateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mDbUpdateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mDbUpdateRequest.Descriptor; }
      }
      
      public override mDbUpdateRequest DefaultInstanceForType {
        get { return global::MessageShared.mDbUpdateRequest.DefaultInstance; }
      }
      
      public override mDbUpdateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mDbUpdateRequest) {
          return MergeFrom((mDbUpdateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mDbUpdateRequest other) {
        if (other == global::MessageShared.mDbUpdateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNameStore) {
          NameStore = other.NameStore;
        }
        if (other.HasParameters) {
          MergeParameters(other.Parameters);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mDbUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mDbUpdateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasNameStore = input.ReadString(ref result.nameStore_);
              break;
            }
            case 26: {
              global::MessageShared.mParameterCollection.Builder subBuilder = global::MessageShared.mParameterCollection.CreateBuilder();
              if (result.hasParameters) {
                subBuilder.MergeFrom(Parameters);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Parameters = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasNameStore {
        get { return result.hasNameStore; }
      }
      public string NameStore {
        get { return result.NameStore; }
        set { SetNameStore(value); }
      }
      public Builder SetNameStore(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNameStore = true;
        result.nameStore_ = value;
        return this;
      }
      public Builder ClearNameStore() {
        PrepareBuilder();
        result.hasNameStore = false;
        result.nameStore_ = "";
        return this;
      }
      
      public bool HasParameters {
       get { return result.hasParameters; }
      }
      public global::MessageShared.mParameterCollection Parameters {
        get { return result.Parameters; }
        set { SetParameters(value); }
      }
      public Builder SetParameters(global::MessageShared.mParameterCollection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParameters = true;
        result.parameters_ = value;
        return this;
      }
      public Builder SetParameters(global::MessageShared.mParameterCollection.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasParameters = true;
        result.parameters_ = builderForValue.Build();
        return this;
      }
      public Builder MergeParameters(global::MessageShared.mParameterCollection value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasParameters &&
            result.parameters_ != global::MessageShared.mParameterCollection.DefaultInstance) {
            result.parameters_ = global::MessageShared.mParameterCollection.CreateBuilder(result.parameters_).MergeFrom(value).BuildPartial();
        } else {
          result.parameters_ = value;
        }
        result.hasParameters = true;
        return this;
      }
      public Builder ClearParameters() {
        PrepareBuilder();
        result.hasParameters = false;
        result.parameters_ = null;
        return this;
      }
    }
    static mDbUpdateRequest() {
      object.ReferenceEquals(global::MessageShared.DbUpdate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class mDbUpdateReply : pb::GeneratedMessage<mDbUpdateReply, mDbUpdateReply.Builder> {
    private mDbUpdateReply() { }
    private static readonly mDbUpdateReply defaultInstance = new mDbUpdateReply().MakeReadOnly();
    private static readonly string[] _mDbUpdateReplyFieldNames = new string[] { "id", "message", "ok", "request" };
    private static readonly uint[] _mDbUpdateReplyFieldTags = new uint[] { 10, 34, 16, 26 };
    public static mDbUpdateReply DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override mDbUpdateReply DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override mDbUpdateReply ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mDbUpdateReply__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<mDbUpdateReply, mDbUpdateReply.Builder> InternalFieldAccessors {
      get { return global::MessageShared.DbUpdate.internal__static_MessageShared_mDbUpdateReply__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int OkFieldNumber = 2;
    private bool hasOk;
    private bool ok_;
    public bool HasOk {
      get { return hasOk; }
    }
    public bool Ok {
      get { return ok_; }
    }
    
    public const int RequestFieldNumber = 3;
    private bool hasRequest;
    private global::MessageShared.mDbUpdateRequest request_;
    public bool HasRequest {
      get { return hasRequest; }
    }
    public global::MessageShared.mDbUpdateRequest Request {
      get { return request_ ?? global::MessageShared.mDbUpdateRequest.DefaultInstance; }
    }
    
    public const int MessageFieldNumber = 4;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasOk) return false;
        if (!hasRequest) return false;
        if (!hasMessage) return false;
        if (!Request.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _mDbUpdateReplyFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[0], Id);
      }
      if (hasOk) {
        output.WriteBool(2, field_names[2], Ok);
      }
      if (hasRequest) {
        output.WriteMessage(3, field_names[3], Request);
      }
      if (hasMessage) {
        output.WriteString(4, field_names[1], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Id);
      }
      if (hasOk) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Ok);
      }
      if (hasRequest) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Request);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static mDbUpdateReply ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static mDbUpdateReply ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static mDbUpdateReply ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static mDbUpdateReply ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private mDbUpdateReply MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(mDbUpdateReply prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<mDbUpdateReply, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(mDbUpdateReply cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private mDbUpdateReply result;
      
      private mDbUpdateReply PrepareBuilder() {
        if (resultIsReadOnly) {
          mDbUpdateReply original = result;
          result = new mDbUpdateReply();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override mDbUpdateReply MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::MessageShared.mDbUpdateReply.Descriptor; }
      }
      
      public override mDbUpdateReply DefaultInstanceForType {
        get { return global::MessageShared.mDbUpdateReply.DefaultInstance; }
      }
      
      public override mDbUpdateReply BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is mDbUpdateReply) {
          return MergeFrom((mDbUpdateReply) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(mDbUpdateReply other) {
        if (other == global::MessageShared.mDbUpdateReply.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasOk) {
          Ok = other.Ok;
        }
        if (other.HasRequest) {
          MergeRequest(other.Request);
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mDbUpdateReplyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mDbUpdateReplyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 16: {
              result.hasOk = input.ReadBool(ref result.ok_);
              break;
            }
            case 26: {
              global::MessageShared.mDbUpdateRequest.Builder subBuilder = global::MessageShared.mDbUpdateRequest.CreateBuilder();
              if (result.hasRequest) {
                subBuilder.MergeFrom(Request);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Request = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasOk {
        get { return result.hasOk; }
      }
      public bool Ok {
        get { return result.Ok; }
        set { SetOk(value); }
      }
      public Builder SetOk(bool value) {
        PrepareBuilder();
        result.hasOk = true;
        result.ok_ = value;
        return this;
      }
      public Builder ClearOk() {
        PrepareBuilder();
        result.hasOk = false;
        result.ok_ = false;
        return this;
      }
      
      public bool HasRequest {
       get { return result.hasRequest; }
      }
      public global::MessageShared.mDbUpdateRequest Request {
        get { return result.Request; }
        set { SetRequest(value); }
      }
      public Builder SetRequest(global::MessageShared.mDbUpdateRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = value;
        return this;
      }
      public Builder SetRequest(global::MessageShared.mDbUpdateRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequest = true;
        result.request_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequest(global::MessageShared.mDbUpdateRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequest &&
            result.request_ != global::MessageShared.mDbUpdateRequest.DefaultInstance) {
            result.request_ = global::MessageShared.mDbUpdateRequest.CreateBuilder(result.request_).MergeFrom(value).BuildPartial();
        } else {
          result.request_ = value;
        }
        result.hasRequest = true;
        return this;
      }
      public Builder ClearRequest() {
        PrepareBuilder();
        result.hasRequest = false;
        result.request_ = null;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static mDbUpdateReply() {
      object.ReferenceEquals(global::MessageShared.DbUpdate.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public partial interface ImDbUpdateService {
    global::MessageShared.mDbUpdateReply Send(global::MessageShared.mDbUpdateRequest mDbUpdateRequest);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class mDbUpdateService : ImDbUpdateService, pb::IRpcDispatch, global::System.IDisposable {
    private readonly bool dispose;
    private readonly pb::IRpcDispatch dispatch;
    public mDbUpdateService(pb::IRpcDispatch dispatch) : this(dispatch, true) {
    }
    public mDbUpdateService(pb::IRpcDispatch dispatch, bool dispose) {
      pb::ThrowHelper.ThrowIfNull(this.dispatch = dispatch, "dispatch");
      this.dispose = dispose && dispatch is global::System.IDisposable;
    }
    
    public void Dispose() {
      if (dispose) ((global::System.IDisposable)dispatch).Dispose();
    }
    
    TMessage pb::IRpcDispatch.CallMethod<TMessage, TBuilder>(string method, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response) {
      return dispatch.CallMethod(method, request, response);
    }
    
    public global::MessageShared.mDbUpdateReply Send(global::MessageShared.mDbUpdateRequest mDbUpdateRequest) {
       return dispatch.CallMethod("Send", mDbUpdateRequest, global::MessageShared.mDbUpdateReply.CreateBuilder());
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Dispatch : pb::IRpcDispatch, global::System.IDisposable {
      private readonly bool dispose;
      private readonly ImDbUpdateService implementation;
      public Dispatch(ImDbUpdateService implementation) : this(implementation, true) {
      }
      public Dispatch(ImDbUpdateService implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public TMessage CallMethod<TMessage, TBuilder>(string methodName, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response)
        where TMessage : pb::IMessageLite<TMessage, TBuilder>
        where TBuilder : pb::IBuilderLite<TMessage, TBuilder> {
        switch(methodName) {
          case "Send": return response.MergeFrom(implementation.Send((global::MessageShared.mDbUpdateRequest)request)).Build();
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ImDbUpdateService), methodName);
        }
      }
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ServerStub : pb::IRpcServerStub, global::System.IDisposable {
      private readonly bool dispose;
      private readonly pb::IRpcDispatch implementation;
      public ServerStub(ImDbUpdateService implementation) : this(implementation, true) {
      }
      public ServerStub(ImDbUpdateService implementation, bool dispose) : this(new Dispatch(implementation, dispose), dispose) {
      }
      public ServerStub(pb::IRpcDispatch implementation) : this(implementation, true) {
      }
      public ServerStub(pb::IRpcDispatch implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public pb::IMessageLite CallMethod(string methodName, pb::ICodedInputStream input, pb::ExtensionRegistry registry) {
        switch(methodName) {
          case "Send": return implementation.CallMethod(methodName, global::MessageShared.mDbUpdateRequest.ParseFrom(input, registry), global::MessageShared.mDbUpdateReply.CreateBuilder());
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ImDbUpdateService), methodName);
        }
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
